-- Configuration
local toggleESP = false  
local MAX_DISTANCE = 1000  -- Set maximum distance for ESP in studs

-- Table to keep track of ESP lines for each player
local playerCubes = {}

-- Function to create a new cube for ESP
local function createCube()
    local lines = {}
    for i = 1, 12 do
        local line = Drawing.new("Line")
        line.Visible = false
        line.Thickness = 2
        line.Transparency = 0.85
        table.insert(lines, line)
    end
    return lines
end

-- Function to determine player color based on team or rainbow cycle
local function getPlayerColor(player)
    return player.Team and player.TeamColor.Color or getRainbowColor()
end

-- Function to create and update the cube for each player
local function updateCube(player)
    if not toggleESP or player == game.Players.LocalPlayer then return end -- Skip if it's the local player
    
    local character = player.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    -- Calculate distance from local player
    local localPlayer = game.Players.LocalPlayer
    local localCharacter = localPlayer.Character
    local localRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
    if not localRootPart then return end

    local distance = (localRootPart.Position - rootPart.Position).Magnitude
    if distance > MAX_DISTANCE then
        -- Hide ESP if player is beyond the maximum distance
        if playerCubes[player] then
            for _, line in pairs(playerCubes[player]) do
                line.Visible = false
            end
        end
        return
    end

    local camera = game.Workspace.CurrentCamera
    local size = Vector3.new(1.5, 3, 1.5)
    local corners = {
        rootPart.CFrame * CFrame.new(-size.X, -size.Y, -size.Z),
        rootPart.CFrame * CFrame.new(size.X, -size.Y, -size.Z),
        rootPart.CFrame * CFrame.new(size.X, -size.Y, size.Z),
        rootPart.CFrame * CFrame.new(-size.X, -size.Y, size.Z),
        rootPart.CFrame * CFrame.new(-size.X, size.Y, -size.Z),
        rootPart.CFrame * CFrame.new(size.X, size.Y, -size.Z),
        rootPart.CFrame * CFrame.new(size.X, size.Y, size.Z),
        rootPart.CFrame * CFrame.new(-size.X, size.Y, size.Z),
    }

    local edges = {
        {1, 2}, {2, 3}, {3, 4}, {4, 1},
        {5, 6}, {6, 7}, {7, 8}, {8, 5},
        {1, 5}, {2, 6}, {3, 7}, {4, 8}
    }

    local color = getPlayerColor(player)  -- Dynamic color update

    for i, edge in pairs(edges) do
        local cubeLines = playerCubes[player]
        if cubeLines then
            local fromCorner, toCorner = corners[edge[1]].Position, corners[edge[2]].Position
            local screenPosA, onScreenA = camera:WorldToViewportPoint(fromCorner)
            local screenPosB, onScreenB = camera:WorldToViewportPoint(toCorner)

            if onScreenA and onScreenB then
                cubeLines[i].From = Vector2.new(screenPosA.X, screenPosA.Y)
                cubeLines[i].To = Vector2.new(screenPosB.X, screenPosB.Y)
                cubeLines[i].Color = color
                cubeLines[i].Visible = true
            else
                cubeLines[i].Visible = false
            end
        end
    end
end

